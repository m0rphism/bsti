# Example from our paper

let
  calculate : &{Add: ?Int. ?Int. Return, Neg: ?Int. Return} -[ u 1 ]-> Int
  calculate c0 =
    case branch c0 {
      Add c -> { recv &c + recv c }
      Neg c -> { 0 - recv c }
    }
in let
  server : &{Add: ?Int. ?Int. !Int. Close, Neg: ?Int. !Int. Close} -[ u 1 ]-> Unit
  server c =
    let r = calculate &c in      #(* c : !Int. Close *)
    ## some accounting
    send r &c;                   #(* c : Close *)
    close c
in
unit
