# Old recursion example from a previous version of our paper

let
  sum_avr : Int -[u 0]->
            Int -[u 0]->
            mu X. &{Next: ?Int. X, Sum: Return, Avr: Return} -[u 1]->
            Int
  sum_avr s n c0 =
    case branch c0 {
      Next c -> { sum_avr (recv &c + s) (n + 1) c }
      Sum c  -> { drop c; s }
      Avr c  -> { drop c; s / n }
    }
in

let
  main : ?Int. mu X. &{Next: ?Int. X, Sum: !Int.Close, Avr: !Int.Close} -[u 1]-> Unit
  main c =
    let x0 = recv &c in
    let v = sum_avr x0 1 &c in
    send v &c ;
    close c
in

unit
