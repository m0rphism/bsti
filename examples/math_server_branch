let 
  server : Int -[ u 1 ]→ Chan (µ x. &{next: ?Int.x, done: !Int.wait}) -[ u 1 ]→ Unit
  server acc c =
    case (offer c) {
      next c1 → {
        server (acc + recv &c1) c1
      }
      done c1 → {
        send acc &c1;
        wait c1
      }
    }
in

let
  client : Chan (µ x. +{next: !Int.x, done: ?Int.term}) -[ u 1 ]→ Unit
  client c =
    select next &c;
    send 1 &c;
    select next &c;
    send 2 &c;
    select done &c;
    print (recv &c);
    term c
in

let c1, c2 = new (µ x. +{next: !Int.x, done: ?Int.term}) in
fork (server 0 c2);
client c1
