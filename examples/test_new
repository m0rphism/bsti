





let x = new (µ x. ?Int.x)
in x

# let x = new (!Int.+{ x: ?Int.wait, y: !Int.wait })
# in x

# let
#   fac : Int -[ u 0 ]→ Int
#   fac x =
#     if x == 0 then
#       1
#     else
#       x * fac (x - 1)
# in
#   fac 5

# let 
#   x : Unit
#   x = unit
# in
#   unit

# let x = inj foo 23 : <foo: Int, bar: Bool> in
# case x {
#   foo y → { "foo" + str y }
#   bar y → { "bar" + str y }
# }

# let
#   f : Unit -[ u 0 ]→ Unit -[ u 0 ]→ Unit
#   f x y = x
# in
# unit

# if 1 == 2 then
#   print "foo"
# else
#   print "bar"

#print ("foo" + str 42)

# 2 + 3 * 4 == -5 && false || ! true

# case (inj foo unit : <foo: Unit, bar: Unit>) {
#   foo x → { x }
#   bar x → { x } 
# }

# let x, y = (unit, unit) in x

# let x = unit in x

# (unit, unit)

# inj foo unit : <foo: Unit, bar: Unit>

# \x. &x : Chan return -[ u 0 ]-> Chan return

# case &y {
#   foo x → { unit };
#   bar x → { unit };
# }
