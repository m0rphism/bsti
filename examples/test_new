







let 
  server = \c.
    let x = recv (&c : Chan (?Int.return)) in
    let y = recv (&c : Chan (?Int.return)) in
    let _ = send (x + y) &c in
    wait c
  : Chan (?Int.?Int.!Int.wait) -[ u 0 ]→ Unit
in

let
  client = unit
in

unit

# print (str "foo")

# 2 + 3 * 4 == -5 && false || ! true

# case (inj foo unit : <foo: Unit, bar: Unit>) {
#   foo x → { x }
#   bar x → { x } 
# }

# let x, y = (unit, unit) in x

# let x = unit in x

# (unit, unit)

# inj foo unit : <foo: Unit, bar: Unit>

# \x. &x : Chan return -[ u 0 ]-> Chan return

# case &y {
#   foo x → { unit };
#   bar x → { unit };
# }
