let
  loop : {o*} -[ u 1 ] -> Unit
  loop op0 =
    drop (!{o} op0)
in
let
  thread : {ao*r} -[ u 1 ] -> Unit
  thread lk0 =
    let lk1 = !{a} lk0 in
    let b , lk2 = split {o*} lk1 in
    let _ = loop b in
    let lk3 = !{o} lk2 in
    drop (!{r} lk3)
in

let lock = new {(ao*r)*d} in

let b1 , lock = split {ao*r} lock in
let _ = thread b1 in

let b2 , lock = split {ao*r} lock in
let _ = thread b2 in

drop (!{d} lock)

